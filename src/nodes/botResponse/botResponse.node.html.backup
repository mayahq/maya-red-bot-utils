<script type='text/javascript'>
    RED.nodes.registerType("bot-response", {
        category: "Maya Red Bot Utils",
        color: "#8BBDD9",
        defaults: {
            name: {
                value: ""
            },
            isProfileConfigNode: {
                value: false
            },
            status: {
                value: "success"
            },
            statusMsg: {
                value: "Success!"
            },
            payloadTypestatusMsg: {
                value: "str"
            },
        },
        inputs: 1,
        outputs: 0,
        icon: "fa-file-code-o.png",
        label: function() {
            return this.name || "bot-response"
        },
        paletteLabel: "bot-response",
        exportable: true,
        oneditprepare: function() {
            const statusselectFieldValues = ["success", "loading", "error"]
            statusselectFieldValues.forEach((val) => {
                $("#node-input-status").append($("<option></option>").attr("value", val).text(val))
            })
            $("#node-input-status").val(this.status)

            if (this.payloadTypestatusMsg === null) {
                if (this.statusMsg === "") {
                    this.payloadTypestatusMsg = "date"
                } else {
                    this.payloadTypestatusMsg = "str"
                }
            } else if (this.payloadTypestatusMsg === 'string' || this.payloadTypestatusMsg === 'none') {
                this.payloadTypestatusMsg = "str"
            }

            $("#node-input-payloadTypestatusMsg").val(this.payloadTypestatusMsg)
            $("#node-input-statusMsg").typedInput({
                default: "str",
                typeField: $("#node-input-payloadTypestatusMsg"),
                types: ["msg", "flow", "global", "str"]
            })
            $("#node-input-statusMsg").typedInput("type", this.payloadTypestatusMsg)

            /** CUSTOM CODE  **/
            function resizeRule(rule) {
                var newWidth = rule.width();
                rule
                .find(".red-ui-typedInput")
                .typedInput("width", (newWidth - 15) / 2);
            }
            var headerList = $("#node-input-headers-container")
                .css("min-height", "150px")
                .css("min-width", "450px")
                .editableList({
                    addItem: function (container, i, header) {
                    var row = $("<div/>")
                    .css({
                        overflow: "hidden",
                        whiteSpace: "nowrap",
                    })
                    .appendTo(container);

                    var propertyName = $("<input/>", {
                        class: "node-input-header-name",
                        type: "text",
                    })
                    .appendTo(row)
                    .typedInput({ types: headerTypes });

                    var propertyValue = $("<input/>", {
                        class: "node-input-header-value",
                        type: "text",
                        style: "margin-left: 10px",
                    })
                    .appendTo(row)
                    .typedInput({
                        types:
                        header.h === "content-type"
                            ? contentTypes
                            : [
                                {
                                value: "other",
                                label: "other",
                                icon: "red/images/typedInput/az.png",
                                },
                            ],
                    });

                    var matchedType = headerTypes.filter(function (ht) {
                        return ht.value === header.h;
                    });
                    if (matchedType.length === 0) {
                        propertyName.typedInput("type", "other");
                        propertyName.typedInput("value", header.h);
                        propertyValue.typedInput("value", header.v);
                        } else {
                        propertyName.typedInput("type", header.h);

                        if (header.h === "content-type") {
                                matchedType = contentTypes.filter(function (ct) {
                                return ct.value === header.v;
                            });
                            if (matchedType.length === 0) {
                                propertyValue.typedInput("type", "other");
                                propertyValue.typedInput("value", header.v);
                            } else {
                                propertyValue.typedInput("type", header.v);
                            }
                        } else {
                            propertyValue.typedInput("value", header.v);
                        }
                    }

                    matchedType = headerTypes.filter(function (ht) {
                        return ht.value === header.h;
                    });
                    if (matchedType.length === 0) {
                        propertyName.typedInput("type", "other");
                        propertyName.typedInput("value", header.h);
                    } else {
                        propertyName.typedInput("type", header.h);
                    }

                    propertyName.on("change", function (event) {
                    var type = propertyName.typedInput("type");
                    if (type === "content-type") {
                        propertyValue.typedInput("types", contentTypes);
                    } else {
                        propertyValue.typedInput("types", [
                        {
                            value: "other",
                            label: "other",
                            icon: "red/images/typedInput/az.png",
                        },
                        ]);
                    }
                    });

                    resizeRule(container);
                },
                resizeItem: resizeRule,
                removable: true,
                });

            if (this.headers) {
                for (var key in this.headers) {
                    if (this.headers.hasOwnProperty(key)) {
                        headerList.editableList("addItem", {
                            h: key,
                            v: this.headers[key],
                        });
                    }
                }
            }

        },
        oneditsave: function() {
            var headers = $("#node-input-headers-container").editableList("items");
            var node = this;
            node.headers = {};
            headers.each(function (i) {
                var header = $(this);
                var keyType = header.find(".node-input-header-name").typedInput("type");
                var keyValue = header
                .find(".node-input-header-name")
                .typedInput("value");
                var valueType = header
                .find(".node-input-header-value")
                .typedInput("type");
                var valueValue = header
                .find(".node-input-header-value")
                .typedInput("value");
                var key = keyType;
                var value = valueType;
                if (keyType === "other") {
                key = keyValue;
                }
                if (valueType === "other") {
                value = valueValue;
                }
                if (key !== "") {
                node.headers[key] = value;
                }
            });
        },
        oneditcancel: function() {},
        oneditdelete: function() {},
        oneditresize: function(size) {
            var rows = $("#dialog-form>div:not(.node-input-headers-container-row)");
            var height = size.height;
            for (var i = 0; i < rows.length; i++) {
                height -= $(rows[i]).outerHeight(true);
            }
            var editorRow = $("#dialog-form>div.node-input-headers-container-row");
            height -=
                parseInt(editorRow.css("marginTop")) +
                parseInt(editorRow.css("marginBottom"));

            $("#node-input-headers-container").editableList("height", height);
        },
        onpaletteadd: function() {},
        onpaletteremove: function() {}
    });
</script>

<script type="text/html" data-template-name="bot-response">
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> Name</label>
        <input type="text" id="node-input-name" style="width:70%;" placeholder="Name" />
    </div>
    <div class="form-row">
        <label for="node-input-status">status</label>
        <select type="text" id="node-input-status">
        </select>
    </div>
    <div class="form-row">
        <label for="node-input-statusMsg">statusMsg</label>
        <input type="text" id="node-input-statusMsg"></input>
        <input type="hidden" id="node-input-payloadTypestatusMsg">
    </div>
</script>

<script type="text/html" data-help-name="bot-response">
    <h2>Description</h2>
    <p>Query opens tabs based on criteria like URL, muted status</p>

    <h2>Config</h2>
    <dl class="message-properties">

        <dt>payload<span class="property-type">various</span></dt>
        <dd>The configured payload of the message.</dd>

        <dt class="optional">topic <span class="property-type">string</span></dt>
        <dd>An optional property</dd>

    </dl>


    <h2>Outputs</h2>
    <dl class="message-properties">

        <dt>payload<span class="property-type">various</span></dt>
        <dd>The configured payload of the message.</dd>

        <dt class="optional">topic <span class="property-type">string</span></dt>
        <dd>An optional property</dd>

    </dl>
</script>